/* automatically generated by rust-bindgen */
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]

pub const __GNUC_VA_LIST: u32 = 1;
pub const NEWT_COLORSET_ROOT: i32 = 2;
pub const NEWT_COLORSET_BORDER: i32 = 3;
pub const NEWT_COLORSET_WINDOW: i32 = 4;
pub const NEWT_COLORSET_SHADOW: i32 = 5;
pub const NEWT_COLORSET_TITLE: i32 = 6;
pub const NEWT_COLORSET_BUTTON: i32 = 7;
pub const NEWT_COLORSET_ACTBUTTON: i32 = 8;
pub const NEWT_COLORSET_CHECKBOX: i32 = 9;
pub const NEWT_COLORSET_ACTCHECKBOX: i32 = 10;
pub const NEWT_COLORSET_ENTRY: i32 = 11;
pub const NEWT_COLORSET_LABEL: i32 = 12;
pub const NEWT_COLORSET_LISTBOX: i32 = 13;
pub const NEWT_COLORSET_ACTLISTBOX: i32 = 14;
pub const NEWT_COLORSET_TEXTBOX: i32 = 15;
pub const NEWT_COLORSET_ACTTEXTBOX: i32 = 16;
pub const NEWT_COLORSET_HELPLINE: i32 = 17;
pub const NEWT_COLORSET_ROOTTEXT: i32 = 18;
pub const NEWT_COLORSET_EMPTYSCALE: i32 = 19;
pub const NEWT_COLORSET_FULLSCALE: i32 = 20;
pub const NEWT_COLORSET_DISENTRY: i32 = 21;
pub const NEWT_COLORSET_COMPACTBUTTON: i32 = 22;
pub const NEWT_COLORSET_ACTSELLISTBOX: i32 = 23;
pub const NEWT_COLORSET_SELLISTBOX: i32 = 24;
pub const NEWT_ARG_LAST: i32 = -100000;
pub const NEWT_ARG_APPEND: i32 = -1;
pub const NEWT_FLAG_RETURNEXIT: i32 = 1;
pub const NEWT_FLAG_HIDDEN: i32 = 2;
pub const NEWT_FLAG_SCROLL: i32 = 4;
pub const NEWT_FLAG_DISABLED: i32 = 8;
pub const NEWT_FLAG_BORDER: i32 = 32;
pub const NEWT_FLAG_WRAP: i32 = 64;
pub const NEWT_FLAG_NOF12: i32 = 128;
pub const NEWT_FLAG_MULTIPLE: i32 = 256;
pub const NEWT_FLAG_SELECTED: i32 = 512;
pub const NEWT_FLAG_CHECKBOX: i32 = 1024;
pub const NEWT_FLAG_PASSWORD: i32 = 2048;
pub const NEWT_FLAG_SHOWCURSOR: i32 = 4096;
pub const NEWT_FD_READ: i32 = 1;
pub const NEWT_FD_WRITE: i32 = 2;
pub const NEWT_FD_EXCEPT: i32 = 4;
pub const NEWT_CHECKBOXTREE_UNSELECTABLE: i32 = 4096;
pub const NEWT_CHECKBOXTREE_HIDE_BOX: i32 = 8192;
pub const NEWT_CHECKBOXTREE_COLLAPSED: u8 = 0u8;
pub const NEWT_CHECKBOXTREE_EXPANDED: u8 = 1u8;
pub const NEWT_CHECKBOXTREE_UNSELECTED: u8 = 32u8;
pub const NEWT_CHECKBOXTREE_SELECTED: u8 = 42u8;
pub const NEWT_LISTBOX_RETURNEXIT: i32 = 1;
pub const NEWT_ENTRY_SCROLL: i32 = 4;
pub const NEWT_ENTRY_HIDDEN: i32 = 2;
pub const NEWT_ENTRY_RETURNEXIT: i32 = 1;
pub const NEWT_ENTRY_DISABLED: i32 = 8;
pub const NEWT_TEXTBOX_WRAP: i32 = 64;
pub const NEWT_TEXTBOX_SCROLL: i32 = 4;
pub const NEWT_FORM_NOF12: i32 = 128;
pub const NEWT_KEY_TAB: i32 = 9u8 as i32;
pub const NEWT_KEY_ENTER: i32 = 13u8 as i32;
pub const NEWT_KEY_SUSPEND: i32 = 26u8 as i32;
pub const NEWT_KEY_ESCAPE: i32 = 27u8 as i32;
pub const NEWT_KEY_RETURN: i32 = 13u8 as i32;
pub const NEWT_KEY_EXTRA_BASE: i32 = 32768;
pub const NEWT_KEY_UP: i32 = 32769;
pub const NEWT_KEY_DOWN: i32 = 32770;
pub const NEWT_KEY_LEFT: i32 = 32772;
pub const NEWT_KEY_RIGHT: i32 = 32773;
pub const NEWT_KEY_BKSPC: i32 = 32774;
pub const NEWT_KEY_DELETE: i32 = 32775;
pub const NEWT_KEY_HOME: i32 = 32776;
pub const NEWT_KEY_END: i32 = 32777;
pub const NEWT_KEY_UNTAB: i32 = 32778;
pub const NEWT_KEY_PGUP: i32 = 32779;
pub const NEWT_KEY_PGDN: i32 = 32780;
pub const NEWT_KEY_INSERT: i32 = 32781;
pub const NEWT_KEY_F1: i32 = 32869;
pub const NEWT_KEY_F2: i32 = 32870;
pub const NEWT_KEY_F3: i32 = 32871;
pub const NEWT_KEY_F4: i32 = 32872;
pub const NEWT_KEY_F5: i32 = 32873;
pub const NEWT_KEY_F6: i32 = 32874;
pub const NEWT_KEY_F7: i32 = 32875;
pub const NEWT_KEY_F8: i32 = 32876;
pub const NEWT_KEY_F9: i32 = 32877;
pub const NEWT_KEY_F10: i32 = 32878;
pub const NEWT_KEY_F11: i32 = 32879;
pub const NEWT_KEY_F12: i32 = 32880;
pub const NEWT_KEY_RESIZE: i32 = 32881;
pub const NEWT_KEY_ERROR: i32 = 32882;
pub const NEWT_ANCHOR_LEFT: i32 = 1;
pub const NEWT_ANCHOR_RIGHT: i32 = 2;
pub const NEWT_ANCHOR_TOP: i32 = 4;
pub const NEWT_ANCHOR_BOTTOM: i32 = 8;
pub const NEWT_GRID_FLAG_GROWX: i32 = 1;
pub const NEWT_GRID_FLAG_GROWY: i32 = 2;
pub type va_list = __builtin_va_list;
pub type __gnuc_va_list = __builtin_va_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct newtColors {
    pub rootFg: *mut ::std::os::raw::c_char,
    pub rootBg: *mut ::std::os::raw::c_char,
    pub borderFg: *mut ::std::os::raw::c_char,
    pub borderBg: *mut ::std::os::raw::c_char,
    pub windowFg: *mut ::std::os::raw::c_char,
    pub windowBg: *mut ::std::os::raw::c_char,
    pub shadowFg: *mut ::std::os::raw::c_char,
    pub shadowBg: *mut ::std::os::raw::c_char,
    pub titleFg: *mut ::std::os::raw::c_char,
    pub titleBg: *mut ::std::os::raw::c_char,
    pub buttonFg: *mut ::std::os::raw::c_char,
    pub buttonBg: *mut ::std::os::raw::c_char,
    pub actButtonFg: *mut ::std::os::raw::c_char,
    pub actButtonBg: *mut ::std::os::raw::c_char,
    pub checkboxFg: *mut ::std::os::raw::c_char,
    pub checkboxBg: *mut ::std::os::raw::c_char,
    pub actCheckboxFg: *mut ::std::os::raw::c_char,
    pub actCheckboxBg: *mut ::std::os::raw::c_char,
    pub entryFg: *mut ::std::os::raw::c_char,
    pub entryBg: *mut ::std::os::raw::c_char,
    pub labelFg: *mut ::std::os::raw::c_char,
    pub labelBg: *mut ::std::os::raw::c_char,
    pub listboxFg: *mut ::std::os::raw::c_char,
    pub listboxBg: *mut ::std::os::raw::c_char,
    pub actListboxFg: *mut ::std::os::raw::c_char,
    pub actListboxBg: *mut ::std::os::raw::c_char,
    pub textboxFg: *mut ::std::os::raw::c_char,
    pub textboxBg: *mut ::std::os::raw::c_char,
    pub actTextboxFg: *mut ::std::os::raw::c_char,
    pub actTextboxBg: *mut ::std::os::raw::c_char,
    pub helpLineFg: *mut ::std::os::raw::c_char,
    pub helpLineBg: *mut ::std::os::raw::c_char,
    pub rootTextFg: *mut ::std::os::raw::c_char,
    pub rootTextBg: *mut ::std::os::raw::c_char,
    pub emptyScale: *mut ::std::os::raw::c_char,
    pub fullScale: *mut ::std::os::raw::c_char,
    pub disabledEntryFg: *mut ::std::os::raw::c_char,
    pub disabledEntryBg: *mut ::std::os::raw::c_char,
    pub compactButtonFg: *mut ::std::os::raw::c_char,
    pub compactButtonBg: *mut ::std::os::raw::c_char,
    pub actSelListboxFg: *mut ::std::os::raw::c_char,
    pub actSelListboxBg: *mut ::std::os::raw::c_char,
    pub selListboxFg: *mut ::std::os::raw::c_char,
    pub selListboxBg: *mut ::std::os::raw::c_char,
}
#[cfg(all(unix, target_pointer_width = "64"))]
#[test]
fn bindgen_test_layout_newtColors() {
    assert_eq!(
        ::std::mem::size_of::<newtColors>(),
        352usize,
        concat!("Size of: ", stringify!(newtColors))
    );
    assert_eq!(
        ::std::mem::align_of::<newtColors>(),
        8usize,
        concat!("Alignment of ", stringify!(newtColors))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<newtColors>())).rootFg as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(newtColors),
            "::",
            stringify!(rootFg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<newtColors>())).rootBg as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(newtColors),
            "::",
            stringify!(rootBg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<newtColors>())).borderFg as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(newtColors),
            "::",
            stringify!(borderFg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<newtColors>())).borderBg as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(newtColors),
            "::",
            stringify!(borderBg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<newtColors>())).windowFg as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(newtColors),
            "::",
            stringify!(windowFg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<newtColors>())).windowBg as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(newtColors),
            "::",
            stringify!(windowBg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<newtColors>())).shadowFg as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(newtColors),
            "::",
            stringify!(shadowFg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<newtColors>())).shadowBg as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(newtColors),
            "::",
            stringify!(shadowBg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<newtColors>())).titleFg as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(newtColors),
            "::",
            stringify!(titleFg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<newtColors>())).titleBg as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(newtColors),
            "::",
            stringify!(titleBg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<newtColors>())).buttonFg as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(newtColors),
            "::",
            stringify!(buttonFg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<newtColors>())).buttonBg as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(newtColors),
            "::",
            stringify!(buttonBg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<newtColors>())).actButtonFg as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(newtColors),
            "::",
            stringify!(actButtonFg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<newtColors>())).actButtonBg as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(newtColors),
            "::",
            stringify!(actButtonBg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<newtColors>())).checkboxFg as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(newtColors),
            "::",
            stringify!(checkboxFg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<newtColors>())).checkboxBg as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(newtColors),
            "::",
            stringify!(checkboxBg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<newtColors>())).actCheckboxFg as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(newtColors),
            "::",
            stringify!(actCheckboxFg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<newtColors>())).actCheckboxBg as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(newtColors),
            "::",
            stringify!(actCheckboxBg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<newtColors>())).entryFg as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(newtColors),
            "::",
            stringify!(entryFg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<newtColors>())).entryBg as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(newtColors),
            "::",
            stringify!(entryBg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<newtColors>())).labelFg as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(newtColors),
            "::",
            stringify!(labelFg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<newtColors>())).labelBg as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(newtColors),
            "::",
            stringify!(labelBg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<newtColors>())).listboxFg as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(newtColors),
            "::",
            stringify!(listboxFg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<newtColors>())).listboxBg as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(newtColors),
            "::",
            stringify!(listboxBg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<newtColors>())).actListboxFg as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(newtColors),
            "::",
            stringify!(actListboxFg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<newtColors>())).actListboxBg as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(newtColors),
            "::",
            stringify!(actListboxBg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<newtColors>())).textboxFg as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(newtColors),
            "::",
            stringify!(textboxFg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<newtColors>())).textboxBg as *const _ as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(newtColors),
            "::",
            stringify!(textboxBg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<newtColors>())).actTextboxFg as *const _ as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(newtColors),
            "::",
            stringify!(actTextboxFg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<newtColors>())).actTextboxBg as *const _ as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(newtColors),
            "::",
            stringify!(actTextboxBg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<newtColors>())).helpLineFg as *const _ as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(newtColors),
            "::",
            stringify!(helpLineFg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<newtColors>())).helpLineBg as *const _ as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(newtColors),
            "::",
            stringify!(helpLineBg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<newtColors>())).rootTextFg as *const _ as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(newtColors),
            "::",
            stringify!(rootTextFg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<newtColors>())).rootTextBg as *const _ as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(newtColors),
            "::",
            stringify!(rootTextBg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<newtColors>())).emptyScale as *const _ as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(newtColors),
            "::",
            stringify!(emptyScale)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<newtColors>())).fullScale as *const _ as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(newtColors),
            "::",
            stringify!(fullScale)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<newtColors>())).disabledEntryFg as *const _ as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(newtColors),
            "::",
            stringify!(disabledEntryFg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<newtColors>())).disabledEntryBg as *const _ as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(newtColors),
            "::",
            stringify!(disabledEntryBg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<newtColors>())).compactButtonFg as *const _ as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(newtColors),
            "::",
            stringify!(compactButtonFg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<newtColors>())).compactButtonBg as *const _ as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(newtColors),
            "::",
            stringify!(compactButtonBg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<newtColors>())).actSelListboxFg as *const _ as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(newtColors),
            "::",
            stringify!(actSelListboxFg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<newtColors>())).actSelListboxBg as *const _ as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(newtColors),
            "::",
            stringify!(actSelListboxBg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<newtColors>())).selListboxFg as *const _ as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(newtColors),
            "::",
            stringify!(selListboxFg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<newtColors>())).selListboxBg as *const _ as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(newtColors),
            "::",
            stringify!(selListboxBg)
        )
    );
}
#[cfg(all(unix, target_pointer_width = "32"))]
#[test]
fn bindgen_test_layout_newtColors() {
    assert_eq!(
        ::std::mem::size_of::<newtColors>(),
        176usize,
        concat!("Size of: ", stringify!(newtColors))
    );
    assert_eq!(
        ::std::mem::align_of::<newtColors>(),
        4usize,
        concat!("Alignment of ", stringify!(newtColors))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<newtColors>())).rootFg as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(newtColors),
            "::",
            stringify!(rootFg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<newtColors>())).rootBg as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(newtColors),
            "::",
            stringify!(rootBg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<newtColors>())).borderFg as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(newtColors),
            "::",
            stringify!(borderFg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<newtColors>())).borderBg as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(newtColors),
            "::",
            stringify!(borderBg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<newtColors>())).windowFg as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(newtColors),
            "::",
            stringify!(windowFg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<newtColors>())).windowBg as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(newtColors),
            "::",
            stringify!(windowBg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<newtColors>())).shadowFg as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(newtColors),
            "::",
            stringify!(shadowFg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<newtColors>())).shadowBg as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(newtColors),
            "::",
            stringify!(shadowBg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<newtColors>())).titleFg as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(newtColors),
            "::",
            stringify!(titleFg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<newtColors>())).titleBg as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(newtColors),
            "::",
            stringify!(titleBg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<newtColors>())).buttonFg as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(newtColors),
            "::",
            stringify!(buttonFg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<newtColors>())).buttonBg as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(newtColors),
            "::",
            stringify!(buttonBg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<newtColors>())).actButtonFg as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(newtColors),
            "::",
            stringify!(actButtonFg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<newtColors>())).actButtonBg as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(newtColors),
            "::",
            stringify!(actButtonBg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<newtColors>())).checkboxFg as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(newtColors),
            "::",
            stringify!(checkboxFg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<newtColors>())).checkboxBg as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(newtColors),
            "::",
            stringify!(checkboxBg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<newtColors>())).actCheckboxFg as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(newtColors),
            "::",
            stringify!(actCheckboxFg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<newtColors>())).actCheckboxBg as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(newtColors),
            "::",
            stringify!(actCheckboxBg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<newtColors>())).entryFg as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(newtColors),
            "::",
            stringify!(entryFg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<newtColors>())).entryBg as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(newtColors),
            "::",
            stringify!(entryBg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<newtColors>())).labelFg as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(newtColors),
            "::",
            stringify!(labelFg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<newtColors>())).labelBg as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(newtColors),
            "::",
            stringify!(labelBg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<newtColors>())).listboxFg as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(newtColors),
            "::",
            stringify!(listboxFg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<newtColors>())).listboxBg as *const _ as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(newtColors),
            "::",
            stringify!(listboxBg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<newtColors>())).actListboxFg as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(newtColors),
            "::",
            stringify!(actListboxFg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<newtColors>())).actListboxBg as *const _ as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(newtColors),
            "::",
            stringify!(actListboxBg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<newtColors>())).textboxFg as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(newtColors),
            "::",
            stringify!(textboxFg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<newtColors>())).textboxBg as *const _ as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(newtColors),
            "::",
            stringify!(textboxBg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<newtColors>())).actTextboxFg as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(newtColors),
            "::",
            stringify!(actTextboxFg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<newtColors>())).actTextboxBg as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(newtColors),
            "::",
            stringify!(actTextboxBg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<newtColors>())).helpLineFg as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(newtColors),
            "::",
            stringify!(helpLineFg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<newtColors>())).helpLineBg as *const _ as usize },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(newtColors),
            "::",
            stringify!(helpLineBg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<newtColors>())).rootTextFg as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(newtColors),
            "::",
            stringify!(rootTextFg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<newtColors>())).rootTextBg as *const _ as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(newtColors),
            "::",
            stringify!(rootTextBg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<newtColors>())).emptyScale as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(newtColors),
            "::",
            stringify!(emptyScale)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<newtColors>())).fullScale as *const _ as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(newtColors),
            "::",
            stringify!(fullScale)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<newtColors>())).disabledEntryFg as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(newtColors),
            "::",
            stringify!(disabledEntryFg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<newtColors>())).disabledEntryBg as *const _ as usize },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(newtColors),
            "::",
            stringify!(disabledEntryBg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<newtColors>())).compactButtonFg as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(newtColors),
            "::",
            stringify!(compactButtonFg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<newtColors>())).compactButtonBg as *const _ as usize },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(newtColors),
            "::",
            stringify!(compactButtonBg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<newtColors>())).actSelListboxFg as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(newtColors),
            "::",
            stringify!(actSelListboxFg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<newtColors>())).actSelListboxBg as *const _ as usize },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(newtColors),
            "::",
            stringify!(actSelListboxBg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<newtColors>())).selListboxFg as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(newtColors),
            "::",
            stringify!(selListboxFg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<newtColors>())).selListboxBg as *const _ as usize },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(newtColors),
            "::",
            stringify!(selListboxBg)
        )
    );
}
pub const newtFlagsSense_NEWT_FLAGS_SET: newtFlagsSense = 0;
pub const newtFlagsSense_NEWT_FLAGS_RESET: newtFlagsSense = 1;
pub const newtFlagsSense_NEWT_FLAGS_TOGGLE: newtFlagsSense = 2;
pub type newtFlagsSense = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct newtComponent_struct {
    _unused: [u8; 0],
}
pub type newtComponent = *mut newtComponent_struct;
extern "C" {# [ link_name = "\u{1}newtDefaultColorPalette" ]    pub static mut newtDefaultColorPalette: newtColors;
}
pub type newtCallback =
    ::std::option::Option<
        unsafe extern "C" fn(arg1: newtComponent,
                             arg2: *mut ::std::os::raw::c_void),
    >;
pub type newtSuspendCallback =
    ::std::option::Option<unsafe extern "C" fn(data: *mut ::std::os::raw::c_void)>;
extern "C" {
    pub fn newtInit() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn newtFinished() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn newtCls();
}
extern "C" {
    pub fn newtResizeScreen(redraw: ::std::os::raw::c_int);
}
extern "C" {
    pub fn newtWaitForKey();
}
extern "C" {
    pub fn newtClearKeyBuffer();
}
extern "C" {
    pub fn newtDelay(usecs: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn newtOpenWindow(
        left: ::std::os::raw::c_int,
        top: ::std::os::raw::c_int,
        width: ::std::os::raw::c_uint,
        height: ::std::os::raw::c_uint,
        title: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn newtCenteredWindow(
        width: ::std::os::raw::c_uint,
        height: ::std::os::raw::c_uint,
        title: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn newtPopWindow();
}
extern "C" {
    pub fn newtPopWindowNoRefresh();
}
extern "C" {
    pub fn newtSetColors(colors: newtColors);
}
extern "C" {
    pub fn newtSetColor(
        colorset: ::std::os::raw::c_int,
        fg: *mut ::std::os::raw::c_char,
        bg: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn newtRefresh();
}
extern "C" {
    pub fn newtSuspend();
}
extern "C" {
    pub fn newtSetSuspendCallback(cb: newtSuspendCallback, data: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn newtSetHelpCallback(cb: newtCallback);
}
extern "C" {
    pub fn newtResume() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn newtPushHelpLine(text: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn newtRedrawHelpLine();
}
extern "C" {
    pub fn newtPopHelpLine();
}
extern "C" {
    pub fn newtDrawRootText(
        col: ::std::os::raw::c_int,
        row: ::std::os::raw::c_int,
        text: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn newtBell();
}
extern "C" {
    pub fn newtCursorOff();
}
extern "C" {
    pub fn newtCursorOn();
}
extern "C" {
    pub fn newtCompactButton(
        left: ::std::os::raw::c_int,
        top: ::std::os::raw::c_int,
        text: *const ::std::os::raw::c_char,
    ) -> newtComponent;
}
extern "C" {
    pub fn newtButton(
        left: ::std::os::raw::c_int,
        top: ::std::os::raw::c_int,
        text: *const ::std::os::raw::c_char,
    ) -> newtComponent;
}
extern "C" {
    pub fn newtCheckbox(
        left: ::std::os::raw::c_int,
        top: ::std::os::raw::c_int,
        text: *const ::std::os::raw::c_char,
        defValue: ::std::os::raw::c_char,
        seq: *const ::std::os::raw::c_char,
        result: *mut ::std::os::raw::c_char,
    ) -> newtComponent;
}
extern "C" {
    pub fn newtCheckboxGetValue(co: newtComponent) -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn newtCheckboxSetValue(co: newtComponent, value: ::std::os::raw::c_char);
}
extern "C" {
    pub fn newtCheckboxSetFlags(
        co: newtComponent,
        flags: ::std::os::raw::c_int,
        sense: newtFlagsSense,
    );
}
extern "C" {
    pub fn newtRadiobutton(
        left: ::std::os::raw::c_int,
        top: ::std::os::raw::c_int,
        text: *const ::std::os::raw::c_char,
        isDefault: ::std::os::raw::c_int,
        prevButton: newtComponent,
    ) -> newtComponent;
}
extern "C" {
    pub fn newtRadioGetCurrent(setMember: newtComponent) -> newtComponent;
}
extern "C" {
    pub fn newtRadioSetCurrent(setMember: newtComponent);
}
extern "C" {
    pub fn newtGetScreenSize(cols: *mut ::std::os::raw::c_int, rows: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn newtLabel(
        left: ::std::os::raw::c_int,
        top: ::std::os::raw::c_int,
        text: *const ::std::os::raw::c_char,
    ) -> newtComponent;
}
extern "C" {
    pub fn newtLabelSetText(co: newtComponent, text: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn newtLabelSetColors(co: newtComponent, colorset: ::std::os::raw::c_int);
}
extern "C" {
    pub fn newtVerticalScrollbar(
        left: ::std::os::raw::c_int,
        top: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        normalColorset: ::std::os::raw::c_int,
        thumbColorset: ::std::os::raw::c_int,
    ) -> newtComponent;
}
extern "C" {
    pub fn newtScrollbarSet(
        co: newtComponent,
        where_: ::std::os::raw::c_int,
        total: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn newtScrollbarSetColors(
        co: newtComponent,
        normal: ::std::os::raw::c_int,
        thumb: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn newtListbox(
        left: ::std::os::raw::c_int,
        top: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
    ) -> newtComponent;
}
extern "C" {
    pub fn newtListboxGetCurrent(co: newtComponent) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn newtListboxSetCurrent(co: newtComponent, num: ::std::os::raw::c_int);
}
extern "C" {
    pub fn newtListboxSetCurrentByKey(co: newtComponent, key: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn newtListboxSetEntry(
        co: newtComponent,
        num: ::std::os::raw::c_int,
        text: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn newtListboxSetWidth(co: newtComponent, width: ::std::os::raw::c_int);
}
extern "C" {
    pub fn newtListboxSetData(
        co: newtComponent,
        num: ::std::os::raw::c_int,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn newtListboxAppendEntry(
        co: newtComponent,
        text: *const ::std::os::raw::c_char,
        data: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn newtListboxInsertEntry(
        co: newtComponent,
        text: *const ::std::os::raw::c_char,
        data: *const ::std::os::raw::c_void,
        key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn newtListboxDeleteEntry(
        co: newtComponent,
        data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn newtListboxClear(co: newtComponent);
}
extern "C" {
    pub fn newtListboxGetEntry(
        co: newtComponent,
        num: ::std::os::raw::c_int,
        text: *mut *mut ::std::os::raw::c_char,
        data: *mut *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn newtListboxGetSelection(
        co: newtComponent,
        numitems: *mut ::std::os::raw::c_int,
    ) -> *mut *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn newtListboxClearSelection(co: newtComponent);
}
extern "C" {
    pub fn newtListboxSelectItem(
        co: newtComponent,
        key: *const ::std::os::raw::c_void,
        sense: newtFlagsSense,
    );
}
extern "C" {
    pub fn newtListboxItemCount(co: newtComponent) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn newtCheckboxTree(
        left: ::std::os::raw::c_int,
        top: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
    ) -> newtComponent;
}
extern "C" {
    pub fn newtCheckboxTreeMulti(
        left: ::std::os::raw::c_int,
        top: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        seq: *mut ::std::os::raw::c_char,
        flags: ::std::os::raw::c_int,
    ) -> newtComponent;
}
extern "C" {
    pub fn newtCheckboxTreeGetSelection(
        co: newtComponent,
        numitems: *mut ::std::os::raw::c_int,
    ) -> *mut *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn newtCheckboxTreeGetCurrent(co: newtComponent) -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn newtCheckboxTreeSetCurrent(co: newtComponent, item: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn newtCheckboxTreeGetMultiSelection(
        co: newtComponent,
        numitems: *mut ::std::os::raw::c_int,
        seqnum: ::std::os::raw::c_char,
    ) -> *mut *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn newtCheckboxTreeAddItem(
        co: newtComponent,
        text: *const ::std::os::raw::c_char,
        data: *const ::std::os::raw::c_void,
        flags: ::std::os::raw::c_int,
        index: ::std::os::raw::c_int,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn newtCheckboxTreeAddArray(
        co: newtComponent,
        text: *const ::std::os::raw::c_char,
        data: *const ::std::os::raw::c_void,
        flags: ::std::os::raw::c_int,
        indexes: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn newtCheckboxTreeFindItem(
        co: newtComponent,
        data: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn newtCheckboxTreeSetEntry(
        co: newtComponent,
        data: *const ::std::os::raw::c_void,
        text: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn newtCheckboxTreeSetWidth(co: newtComponent, width: ::std::os::raw::c_int);
}
extern "C" {
    pub fn newtCheckboxTreeGetEntryValue(
        co: newtComponent,
        data: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn newtCheckboxTreeSetEntryValue(
        co: newtComponent,
        data: *const ::std::os::raw::c_void,
        value: ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn newtTextboxReflowed(
        left: ::std::os::raw::c_int,
        top: ::std::os::raw::c_int,
        text: *mut ::std::os::raw::c_char,
        width: ::std::os::raw::c_int,
        flexDown: ::std::os::raw::c_int,
        flexUp: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
    ) -> newtComponent;
}
extern "C" {
    pub fn newtTextbox(
        left: ::std::os::raw::c_int,
        top: ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
    ) -> newtComponent;
}
extern "C" {
    pub fn newtTextboxSetText(co: newtComponent, text: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn newtTextboxSetHeight(co: newtComponent, height: ::std::os::raw::c_int);
}
extern "C" {
    pub fn newtTextboxGetNumLines(co: newtComponent) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn newtTextboxSetColors(
        co: newtComponent,
        normal: ::std::os::raw::c_int,
        active: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn newtReflowText(
        text: *mut ::std::os::raw::c_char,
        width: ::std::os::raw::c_int,
        flexDown: ::std::os::raw::c_int,
        flexUp: ::std::os::raw::c_int,
        actualWidth: *mut ::std::os::raw::c_int,
        actualHeight: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct newtExitStruct {
    pub reason: newtExitStruct__bindgen_ty_1,
    pub u: newtExitStruct__bindgen_ty_2,
}
pub const newtExitStruct_NEWT_EXIT_HOTKEY: newtExitStruct__bindgen_ty_1 = 0;
pub const newtExitStruct_NEWT_EXIT_COMPONENT: newtExitStruct__bindgen_ty_1 = 1;
pub const newtExitStruct_NEWT_EXIT_FDREADY: newtExitStruct__bindgen_ty_1 = 2;
pub const newtExitStruct_NEWT_EXIT_TIMER: newtExitStruct__bindgen_ty_1 = 3;
pub const newtExitStruct_NEWT_EXIT_ERROR: newtExitStruct__bindgen_ty_1 = 4;
pub type newtExitStruct__bindgen_ty_1 = u32;
#[cfg(all(unix, target_pointer_width = "64"))]
#[repr(C)]
#[derive(Copy, Clone)]pub union newtExitStruct__bindgen_ty_2 { pub watch : :: std :: os :: raw :: c_int , pub key : :: std :: os :: raw :: c_int , pub co : newtComponent , _bindgen_union_align : u64 , }
#[cfg(all(unix, target_pointer_width = "64"))]
#[test]
fn bindgen_test_layout_newtExitStruct__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<newtExitStruct__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(newtExitStruct__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<newtExitStruct__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(newtExitStruct__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<newtExitStruct__bindgen_ty_2>())).watch as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(newtExitStruct__bindgen_ty_2),
            "::",
            stringify!(watch)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<newtExitStruct__bindgen_ty_2>())).key as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(newtExitStruct__bindgen_ty_2),
            "::",
            stringify!(key)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<newtExitStruct__bindgen_ty_2>())).co as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(newtExitStruct__bindgen_ty_2),
            "::",
            stringify!(co)
        )
    );
}
#[cfg(all(unix, target_pointer_width = "32"))]
#[repr(C)]
#[derive(Copy, Clone)]pub union newtExitStruct__bindgen_ty_2 { pub watch : :: std :: os :: raw :: c_int , pub key : :: std :: os :: raw :: c_int , pub co : newtComponent , _bindgen_union_align : u32 , }
#[cfg(all(unix, target_pointer_width = "32"))]
#[test]
fn bindgen_test_layout_newtExitStruct__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<newtExitStruct__bindgen_ty_2>(),
        4usize,
        concat!("Size of: ", stringify!(newtExitStruct__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<newtExitStruct__bindgen_ty_2>(),
        4usize,
        concat!("Alignment of ", stringify!(newtExitStruct__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<newtExitStruct__bindgen_ty_2>())).watch as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(newtExitStruct__bindgen_ty_2),
            "::",
            stringify!(watch)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<newtExitStruct__bindgen_ty_2>())).key as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(newtExitStruct__bindgen_ty_2),
            "::",
            stringify!(key)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<newtExitStruct__bindgen_ty_2>())).co as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(newtExitStruct__bindgen_ty_2),
            "::",
            stringify!(co)
        )
    );
}
#[cfg(all(unix, target_pointer_width = "64"))]
#[test]
fn bindgen_test_layout_newtExitStruct() {
    assert_eq!(
        ::std::mem::size_of::<newtExitStruct>(),
        16usize,
        concat!("Size of: ", stringify!(newtExitStruct))
    );
    assert_eq!(
        ::std::mem::align_of::<newtExitStruct>(),
        8usize,
        concat!("Alignment of ", stringify!(newtExitStruct))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<newtExitStruct>())).reason as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(newtExitStruct),
            "::",
            stringify!(reason)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<newtExitStruct>())).u as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(newtExitStruct),
            "::",
            stringify!(u)
        )
    );
}
#[cfg(all(unix, target_pointer_width = "32"))]
#[test]
fn bindgen_test_layout_newtExitStruct() {
    assert_eq!(
        ::std::mem::size_of::<newtExitStruct>(),
        8usize,
        concat!("Size of: ", stringify!(newtExitStruct))
    );
    assert_eq!(
        ::std::mem::align_of::<newtExitStruct>(),
        4usize,
        concat!("Alignment of ", stringify!(newtExitStruct))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<newtExitStruct>())).reason as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(newtExitStruct),
            "::",
            stringify!(reason)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<newtExitStruct>())).u as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(newtExitStruct),
            "::",
            stringify!(u)
        )
    );
}
extern "C" {
    pub fn newtForm(
        vertBar: newtComponent,
        helpTag: *mut ::std::os::raw::c_void,
        flags: ::std::os::raw::c_int,
    ) -> newtComponent;
}
extern "C" {
    pub fn newtFormSetTimer(form: newtComponent, millisecs: ::std::os::raw::c_int);
}
extern "C" {
    pub fn newtFormWatchFd(
        form: newtComponent,
        fd: ::std::os::raw::c_int,
        fdFlags: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn newtFormSetSize(co: newtComponent);
}
extern "C" {
    pub fn newtFormGetCurrent(co: newtComponent) -> newtComponent;
}
extern "C" {
    pub fn newtFormSetBackground(co: newtComponent, color: ::std::os::raw::c_int);
}
extern "C" {
    pub fn newtFormSetCurrent(co: newtComponent, subco: newtComponent);
}
extern "C" {
    pub fn newtFormAddComponent(form: newtComponent, co: newtComponent);
}
extern "C" {
    pub fn newtFormAddComponents(form: newtComponent, ...);
}
extern "C" {
    pub fn newtFormSetHeight(co: newtComponent, height: ::std::os::raw::c_int);
}
extern "C" {
    pub fn newtFormSetWidth(co: newtComponent, width: ::std::os::raw::c_int);
}
extern "C" {
    pub fn newtRunForm(form: newtComponent) -> newtComponent;
}
extern "C" {
    pub fn newtFormRun(co: newtComponent, es: *mut newtExitStruct);
}
extern "C" {
    pub fn newtDrawForm(form: newtComponent);
}
extern "C" {
    pub fn newtFormAddHotKey(co: newtComponent, key: ::std::os::raw::c_int);
}
extern "C" {
    pub fn newtFormGetScrollPosition(co: newtComponent) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn newtFormSetScrollPosition(co: newtComponent, position: ::std::os::raw::c_int);
}
pub type newtEntryFilter =
    ::std::option::Option<
        unsafe extern "C" fn(entry: newtComponent,
                             data: *mut ::std::os::raw::c_void,
                             ch: ::std::os::raw::c_int,
                             cursor: ::std::os::raw::c_int)
                             -> ::std::os::raw::c_int,
    >;
extern "C" {
    pub fn newtEntry(
        left: ::std::os::raw::c_int,
        top: ::std::os::raw::c_int,
        initialValue: *const ::std::os::raw::c_char,
        width: ::std::os::raw::c_int,
        resultPtr: *mut *const ::std::os::raw::c_char,
        flags: ::std::os::raw::c_int,
    ) -> newtComponent;
}
extern "C" {
    pub fn newtEntrySet(
        co: newtComponent,
        value: *const ::std::os::raw::c_char,
        cursorAtEnd: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn newtEntrySetFilter(
        co: newtComponent,
        filter: newtEntryFilter,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn newtEntryGetValue(co: newtComponent) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn newtEntrySetFlags(
        co: newtComponent,
        flags: ::std::os::raw::c_int,
        sense: newtFlagsSense,
    );
}
extern "C" {
    pub fn newtEntrySetColors(
        co: newtComponent,
        normal: ::std::os::raw::c_int,
        disabled: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn newtEntryGetCursorPosition(co: newtComponent) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn newtEntrySetCursorPosition(co: newtComponent, position: ::std::os::raw::c_int);
}
extern "C" {
    pub fn newtScale(
        left: ::std::os::raw::c_int,
        top: ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
        fullValue: ::std::os::raw::c_longlong,
    ) -> newtComponent;
}
extern "C" {
    pub fn newtScaleSet(co: newtComponent, amount: ::std::os::raw::c_ulonglong);
}
extern "C" {
    pub fn newtScaleSetColors(
        co: newtComponent,
        empty: ::std::os::raw::c_int,
        full: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn newtComponentAddCallback(
        co: newtComponent,
        f: newtCallback,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn newtComponentTakesFocus(co: newtComponent, val: ::std::os::raw::c_int);
}
extern "C" {
    pub fn newtComponentGetPosition(
        co: newtComponent,
        left: *mut ::std::os::raw::c_int,
        top: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn newtComponentGetSize(
        co: newtComponent,
        width: *mut ::std::os::raw::c_int,
        height: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn newtComponentAddDestroyCallback(
        co: newtComponent,
        f: newtCallback,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn newtFormDestroy(form: newtComponent);
}
extern "C" {
    pub fn newtComponentDestroy(co: newtComponent);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct grid_s {
    _unused: [u8; 0],
}
pub type newtGrid = *mut grid_s;
pub const newtGridElement_NEWT_GRID_EMPTY: newtGridElement = 0;
pub const newtGridElement_NEWT_GRID_COMPONENT: newtGridElement = 1;
pub const newtGridElement_NEWT_GRID_SUBGRID: newtGridElement = 2;
pub type newtGridElement = u32;
extern "C" {
    pub fn newtCreateGrid(cols: ::std::os::raw::c_int, rows: ::std::os::raw::c_int) -> newtGrid;
}
extern "C" {
    pub fn newtGridVStacked(
        type_: newtGridElement,
        what: *mut ::std::os::raw::c_void,
        ...
    ) -> newtGrid;
}
extern "C" {
    pub fn newtGridVCloseStacked(
        type_: newtGridElement,
        what: *mut ::std::os::raw::c_void,
        ...
    ) -> newtGrid;
}
extern "C" {
    pub fn newtGridHStacked(
        type1: newtGridElement,
        what1: *mut ::std::os::raw::c_void,
        ...
    ) -> newtGrid;
}
extern "C" {
    pub fn newtGridHCloseStacked(
        type1: newtGridElement,
        what1: *mut ::std::os::raw::c_void,
        ...
    ) -> newtGrid;
}
extern "C" {
    pub fn newtGridBasicWindow(
        text: newtComponent,
        middle: newtGrid,
        buttons: newtGrid,
    ) -> newtGrid;
}
extern "C" {
    pub fn newtGridSimpleWindow(
        text: newtComponent,
        middle: newtComponent,
        buttons: newtGrid,
    ) -> newtGrid;
}
extern "C" {
    pub fn newtGridSetField(
        grid: newtGrid,
        col: ::std::os::raw::c_int,
        row: ::std::os::raw::c_int,
        type_: newtGridElement,
        val: *mut ::std::os::raw::c_void,
        padLeft: ::std::os::raw::c_int,
        padTop: ::std::os::raw::c_int,
        padRight: ::std::os::raw::c_int,
        padBottom: ::std::os::raw::c_int,
        anchor: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn newtGridPlace(grid: newtGrid, left: ::std::os::raw::c_int, top: ::std::os::raw::c_int);
}
extern "C" {
    pub fn newtGridFree(grid: newtGrid, recurse: ::std::os::raw::c_int);
}
extern "C" {
    pub fn newtGridGetSize(
        grid: newtGrid,
        width: *mut ::std::os::raw::c_int,
        height: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn newtGridWrappedWindow(grid: newtGrid, title: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn newtGridWrappedWindowAt(
        grid: newtGrid,
        title: *mut ::std::os::raw::c_char,
        left: ::std::os::raw::c_int,
        top: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn newtGridAddComponentsToForm(
        grid: newtGrid,
        form: newtComponent,
        recurse: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn newtButtonBarv(
        button1: *mut ::std::os::raw::c_char,
        b1comp: *mut newtComponent,
        args: va_list,
    ) -> newtGrid;
}
extern "C" {
    pub fn newtButtonBar(
        button1: *mut ::std::os::raw::c_char,
        b1comp: *mut newtComponent,
        ...
    ) -> newtGrid;
}
extern "C" {
    pub fn newtWinMessage(
        title: *mut ::std::os::raw::c_char,
        buttonText: *mut ::std::os::raw::c_char,
        text: *mut ::std::os::raw::c_char,
        ...
    );
}
extern "C" {
    pub fn newtWinMessagev(
        title: *mut ::std::os::raw::c_char,
        buttonText: *mut ::std::os::raw::c_char,
        text: *mut ::std::os::raw::c_char,
        argv: va_list,
    );
}
extern "C" {
    pub fn newtWinChoice(
        title: *mut ::std::os::raw::c_char,
        button1: *mut ::std::os::raw::c_char,
        button2: *mut ::std::os::raw::c_char,
        text: *mut ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn newtWinTernary(
        title: *mut ::std::os::raw::c_char,
        button1: *mut ::std::os::raw::c_char,
        button2: *mut ::std::os::raw::c_char,
        button3: *mut ::std::os::raw::c_char,
        message: *mut ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn newtWinMenu(
        title: *mut ::std::os::raw::c_char,
        text: *mut ::std::os::raw::c_char,
        suggestedWidth: ::std::os::raw::c_int,
        flexDown: ::std::os::raw::c_int,
        flexUp: ::std::os::raw::c_int,
        maxListHeight: ::std::os::raw::c_int,
        items: *mut *mut ::std::os::raw::c_char,
        listItem: *mut ::std::os::raw::c_int,
        button1: *mut ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct newtWinEntry {
    pub text: *mut ::std::os::raw::c_char,
    pub value: *mut *mut ::std::os::raw::c_char,
    pub flags: ::std::os::raw::c_int,
}
#[cfg(all(unix, target_pointer_width = "64"))]
#[test]
fn bindgen_test_layout_newtWinEntry() {
    assert_eq!(
        ::std::mem::size_of::<newtWinEntry>(),
        24usize,
        concat!("Size of: ", stringify!(newtWinEntry))
    );
    assert_eq!(
        ::std::mem::align_of::<newtWinEntry>(),
        8usize,
        concat!("Alignment of ", stringify!(newtWinEntry))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<newtWinEntry>())).text as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(newtWinEntry),
            "::",
            stringify!(text)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<newtWinEntry>())).value as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(newtWinEntry),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<newtWinEntry>())).flags as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(newtWinEntry),
            "::",
            stringify!(flags)
        )
    );
}
#[cfg(all(unix, target_pointer_width = "32"))]
#[test]
fn bindgen_test_layout_newtWinEntry() {
    assert_eq!(
        ::std::mem::size_of::<newtWinEntry>(),
        12usize,
        concat!("Size of: ", stringify!(newtWinEntry))
    );
    assert_eq!(
        ::std::mem::align_of::<newtWinEntry>(),
        4usize,
        concat!("Alignment of ", stringify!(newtWinEntry))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<newtWinEntry>())).text as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(newtWinEntry),
            "::",
            stringify!(text)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<newtWinEntry>())).value as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(newtWinEntry),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<newtWinEntry>())).flags as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(newtWinEntry),
            "::",
            stringify!(flags)
        )
    );
}
extern "C" {
    pub fn newtWinEntries(
        title: *mut ::std::os::raw::c_char,
        text: *mut ::std::os::raw::c_char,
        suggestedWidth: ::std::os::raw::c_int,
        flexDown: ::std::os::raw::c_int,
        flexUp: ::std::os::raw::c_int,
        dataWidth: ::std::os::raw::c_int,
        items: *mut newtWinEntry,
        button1: *mut ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
#[cfg(all(unix, target_pointer_width = "64"))]
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[cfg(all(unix, target_pointer_width = "32"))]
pub type __builtin_va_list = *mut ::std::os::raw::c_char;
#[cfg(all(unix, target_pointer_width = "64"))]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[cfg(all(unix, target_pointer_width = "64"))]
#[test]
fn bindgen_test_layout___va_list_tag() {
    assert_eq!(
        ::std::mem::size_of::<__va_list_tag>(),
        24usize,
        concat!("Size of: ", stringify!(__va_list_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<__va_list_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(__va_list_tag))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).gp_offset as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(gp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).fp_offset as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(fp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).overflow_arg_area as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(overflow_arg_area)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).reg_save_area as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(reg_save_area)
        )
    );
}
